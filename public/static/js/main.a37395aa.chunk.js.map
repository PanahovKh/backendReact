{"version":3,"sources":["components/input/Input.jsx","components/Model/Model.jsx","REST.js","components/WelcomePage/WelcomePage.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","this","props","type","name","className","placeholder","onChange","React","Component","Model","inputChangeHandler","e","target","value","setState","prevState","inputValues","checkFormHandler","preventDefault","data","xhr","XMLHttpRequest","dataInJson","JSON","stringify","open","setRequestHeader","send","sendPostRequest","state","id","onClick","handleSubmit","onSubmit","WelcomePage","changeModal","isShow","isShowModal","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAyBeA,G,6KArBD,IAAD,EAOLC,KAAKC,MALLC,EAFK,EAELA,KACAC,EAHK,EAGLA,KACAC,EAJK,EAILA,UACAC,EALK,EAKLA,YACAC,EANK,EAMLA,SAGA,OACI,2BACIJ,KAAMA,EACNC,KAAMA,EACNC,UAAWA,EACXC,YAAaA,EACbC,SAAUA,Q,GAhBNC,IAAMC,YCuFXC,E,kDArFX,WAAaR,GAAQ,IAAD,8BAChB,cAAMA,IAMVS,mBAAqB,SAACC,GAAO,IAAD,EACFA,EAAEC,OAAjBT,EADiB,EACjBA,KAAMU,EADW,EACXA,MAEb,EAAKC,UAAS,SAAAC,GAAS,MAAK,CACxBC,YAAW,2BACRD,EAAUC,aADF,kBAEVb,EAAQU,SAbG,EAiBpBI,iBAAmB,SAACN,GAGhB,OAFAA,EAAEO,iBCvBqB,SAAAC,GAC3B,IAAIC,EAAM,IAAIC,eACVC,EAAaC,KAAKC,UAAUL,GAEhCC,EAAIK,KAAK,OAAQ,YACjBL,EAAIM,iBAAiB,eAAgB,oBACrCN,EAAIO,KAAKL,GDkBLM,CAAgB,EAAKC,MAAMb,cACpB,GAlBP,EAAKa,MAAQ,CACTb,YAAa,IAHD,E,qDAwBhB,OACA,yBAAKc,GAAG,YACR,4CACA,0BAAMA,GAAG,aAAaC,QAAW/B,KAAKgC,aAAcC,SAAUjC,KAAKiB,kBACnE,uCAAY,6BACZ,kBAAC,EAAD,CACIf,KAAM,OACNC,KAAK,QACLC,UAAW,aACXC,YAAa,qBACbC,SAAUN,KAAKU,sBAPnB,IASS,6BACT,sCAAW,6BACX,kBAAC,EAAD,CACIR,KAAM,SACNC,KAAM,MACNC,UAAW,YACXC,YAAa,oBACbC,SAAUN,KAAKU,sBAhBnB,IAkBS,6BAET,wCAAa,6BACb,kBAAC,EAAD,CACIR,KAAM,QACNC,KAAM,QACNC,UAAW,cACXC,YAAa,sBACbC,SAAUN,KAAKU,sBA1BnB,IA4BS,6BAET,sCAAW,6BACX,kBAAC,EAAD,CACIR,KAAM,OACNC,KAAM,SACNC,UAAW,YACXC,YAAa,sBACbC,SAAUN,KAAKU,sBAInB,kBAAC,EAAD,CACIR,KAAM,SACNE,UAAW,iBAGf,kBAAC,EAAD,CACIF,KAAM,QACNE,UAAW,6B,GA3EHG,IAAMC,WE+BX0B,G,wDA5BX,WAAYjC,GAAQ,IAAD,8BACf,cAAMA,IAMVkC,YAAc,SAAAC,GACV,EAAKtB,SAAU,CAACuB,YAAaD,KAN7B,EAAKP,MAAQ,CACTQ,aAAa,GAHF,E,qDAWT,IACEF,EAAgBnC,KAAhBmC,YACAE,EAAgBrC,KAAK6B,MAArBQ,YAER,OACI,oCACKA,EAAe,kBAAC,EAAD,MAChB,yBAAKjC,UAAY,cACb,wBAAIA,UAAY,qBAAhB,mBACA,4BAAQA,UAAY,kBAAkB2B,QAAWI,GAAjD,gC,GArBM5B,IAAMC,YCGjB8B,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a37395aa.chunk.js","sourcesContent":["import React from 'react'\r\nimport './input.css';\r\n\r\nclass Input extends React.Component {\r\n    render() {\r\n        const {\r\n        type,\r\n        name,\r\n        className,\r\n        placeholder,\r\n        onChange,\r\n    } = this.props\r\n\r\n        return (\r\n            <input \r\n                type={type}\r\n                name={name}\r\n                className={className}\r\n                placeholder={placeholder}\r\n                onChange={onChange}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Input;","import React from 'react'\r\nimport Input from '../input/Input'\r\nimport {sendPostRequest} from '../../REST'\r\n\r\nclass Model extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            inputValues: {}\r\n        }\r\n    }  \r\n\r\n    inputChangeHandler = (e) => {\r\n        const {name, value} = e.target;\r\n\r\n        this.setState(prevState => ({\r\n            inputValues : {\r\n            ...prevState.inputValues,\r\n            [name] : value\r\n            }\r\n        }));\r\n    }\r\n    checkFormHandler = (e) => {\r\n        e.preventDefault();\r\n        sendPostRequest(this.state.inputValues);\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id='contacts'>\r\n        <h5>Contact Info</h5>\r\n        <form id='form_input' onClick = {this.handleSubmit} onSubmit={this.checkFormHandler}> \r\n        <label>Name <br />\r\n        <Input \r\n            type={'text'}\r\n            name='login'\r\n            className={'input_name'}\r\n            placeholder={'Input your name...'}\r\n            onChange={this.inputChangeHandler}\r\n            /> \r\n        </label> <br />\r\n        <label>Age <br />\r\n        <Input \r\n            type={'number'}\r\n            name={'age'}\r\n            className={'input_age'}\r\n            placeholder={'Input your age...'}\r\n            onChange={this.inputChangeHandler}\r\n        />\r\n        </label> <br />\r\n\r\n        <label>Email <br />\r\n        <Input \r\n            type={'email'}\r\n            name={'email'}\r\n            className={'input_email'}\r\n            placeholder={'Input your email...'}\r\n            onChange={this.inputChangeHandler}\r\n        />\r\n        </label> <br />\r\n        \r\n        <label>Tel <br />\r\n        <Input \r\n            type={'text'}\r\n            name={'number'}\r\n            className={'input_tel'}\r\n            placeholder={'Input tel number...'}\r\n            onChange={this.inputChangeHandler}\r\n        />\r\n        </label>\r\n\r\n        <Input \r\n            type={'submit'}\r\n            className={'input_submit'}\r\n        />\r\n\r\n        <Input \r\n            type={'reset'}\r\n            className={'input_submit reset'}\r\n        />\r\n    \r\n        </form>\r\n        </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Model","export const sendPostRequest = data => {\r\n    let xhr = new XMLHttpRequest();\r\n    let dataInJson = JSON.stringify(data);\r\n\r\n    xhr.open(\"POST\", \"/add-obj\");\r\n    xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n    xhr.send(dataInJson);\r\n}\r\n","import React from 'react'\r\nimport Model from '../Model/Model'\r\nimport './welcomePage.css'\r\n\r\n\r\n\r\nclass WelcomePage extends React.Component{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isShowModal: false,\r\n        }\r\n    }\r\n\r\n    changeModal = isShow => {\r\n        this.setState ({isShowModal: isShow}) \r\n    }\r\n\r\n    render() {\r\n        const { changeModal } = this;\r\n        const { isShowModal } = this.state;\r\n    \r\n        return (\r\n            <>\r\n                {isShowModal ? (<Model/>) : \r\n                <div className = 'modal-page'>\r\n                    <h1 className = 'modal-page__title'>Welcome to Game</h1>\r\n                    <button className = 'modal-page__btn' onClick = {changeModal}>Click for Registration</button>\r\n                </div>\r\n                } \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WelcomePage","import React from 'react';\nimport WelcomePage from './components/WelcomePage/WelcomePage'\n\nfunction App() {\n  return (\n    <WelcomePage />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}